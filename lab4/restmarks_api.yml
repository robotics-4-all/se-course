swagger: '2.0'

info:
  description: This is a simple API
  version: 1.0.0
  title: SE Course RESTMARKS API
  # put the contact info for your development or API team
  contact:
    email: klpanagi@gmail.com

  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html

# tags are used for organizing operations
tags:
- name: admin
  description: Secured Admin-only calls
- name: user
  description: Simple user accounts


paths:
  /user:
    post:
      tags:
      - user
      summary: Create a new user account
      # Give an operationId to be used by the code-generators (client/server)
      operationId: createUser
      description: |
        FR1 - A user must be able to create a user account by providing
        a username and a password
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: "body"
        name: "body"
        description: "User model"
        required: true
      responses:
        400:
          description: Bad input parameter
        default:
          description: "successful operation"

  /user/login:
    put:
      tags:
      - user
      summary: "Logs user into the system"
      description: |
        FR2 - A user must be able to login to his/her account by providing his/her
        username and password
      operationId: "loginUser"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "query"
        description: "The user name for login"
        required: true
        type: "string"
      - name: "password"
        in: "query"
        description: "The password for login in clear text"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            #type: "string"
            $ref: "#/definitions/Token"
          headers:
            X-Rate-Limit:
              type: "integer"
              format: "int32"
              description: "calls per hour allowed by the user"
            X-Expires-After:
              type: "string"
              format: "date-time"
              description: "date in UTC when token expires"
        400:
          description: "Invalid username/password supplied"

  /user/{username}:
    put:
      tags:
      - user
      summary: Update user information
      operationId: updateUser
      description: |
        FR3 - A user that is logged in to his account must be able to update his
        password
      produces:
      - application/json
      parameters:
      - in: "path"
        name: "username"
        description: "user that need to be updated"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "User model"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        400:
          description: Bad input parameter
        default:
          description: "successful operation"
      security:
      - JWTbearerAuth: []

  /user/{username}/bookmark:
    post:
      tags:
      - user
      summary: Add Bookmark to user account
      # Give an operationId to be used by the code-generators (client/server)
      operationId: addBookmark
      description: |
        FR4 - A logged in user must be able to add a new bookmark to his account
      produces:
      - application/json
      parameters:
      - in: "path"
        name: "username"
        description: "user that need to be updated"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Bookmark model"
        required: true
        schema:
          $ref: "#/definitions/Bookmark"
      responses:
        400:
          description: Bad input parameter
        default:
          description: "Successful operation"
      security:
      - JWTbearerAuth: []

    get:
      tags:
      - user
      summary: Retrieve all bookmarks
      # Give an operationId to be used by the code-generators (client/server)
      operationId: getAllBookmarks
      description: |
        FR5 - A logged in user must be able to retrieve any bookmark from his
        account
        (FR10)
      produces:
      - application/json
      parameters:
      - in: "path"
        name: "username"
        description: "The username"
        required: true
        type: "string"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/AllBookmarks"
        400:
          description: Bad input parameter
      security:
      - JWTbearerAuth: []

  /user/{username}/bookmark/{bookmark_id}:
    get:
      tags:
      - user
      summary: Retrieve bookmark
      # Give an operationId to be used by the code-generators (client/server)
      operationId: getBookmark
      description: |
        FR5 - A logged in user must be able to retrieve any bookmark from his
        account
      produces:
      - application/json
      parameters:
      - in: "path"
        name: "username"
        description: "The username"
        required: true
        type: "string"
      - in: "path"
        name: "bookmark_id"
        description: "The ID of the bookmark"
        required: true
        type: "string"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Bookmark"
        400:
          description: Bad input parameter
      security:
      - JWTbearerAuth: []

    delete:
      tags:
      - user
      summary: Delete bookmark from user account
      # Give an operationId to be used by the code-generators (client/server)
      operationId: deleteBookmark
      description: |
        FR6 - A logged in user must be able to delete any bookmark
        from his account
      produces:
      - application/json
      parameters:
      - in: "path"
        name: "username"
        description: "The username"
        required: true
        type: "string"
      - in: "path"
        name: "bookmark_id"
        description: "The ID of the bookmark"
        required: true
        type: "string"
      responses:
        200:
          description: "Successful operation"
        400:
          description: Bad input parameter
      security:
      - JWTbearerAuth: []

    put:
      tags:
      - user
      summary: Update bookmark
      # Give an operationId to be used by the code-generators (client/server)
      operationId: updateBookmark
      description: |
        FR7 - A logged in user must be able to update any bookmark from his
        account
        FR8 - A logged in user must be able to mark his bookmarks as public or
        private
      produces:
      - application/json
      parameters:
      - in: "path"
        name: "username"
        description: "The username"
        required: true
        type: "string"
      - in: "path"
        name: "bookmark_id"
        description: "The ID of the bookmark"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Bookmark model"
        required: true
        schema:
          $ref: "#/definitions/Bookmark"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Bookmark"
        400:
          description: Bad input parameter
      security:
      - JWTbearerAuth: []

  /user/{username}/bookmark/{bookmark_id}/tag:
    post:
      tags:
      - user
      summary: Add tag to bookmark
      # Give an operationId to be used by the code-generators (client/server)
      operationId: tagBookmark
      description: |
        FR9 - A logged in user must be able to add tags to his bookmarks
      produces:
      - application/json
      parameters:
      - in: "path"
        name: "username"
        description: "The username"
        required: true
        type: "string"
      - in: "path"
        name: "bookmark_id"
        description: "The ID of the bookmark"
        required: true
        type: "string"
      - in: "query"
        name: "tag"
        description: "Bookmark model"
        required: true
        type: "string"
      responses:
        200:
          description: "Successful operation"
        400:
          description: Bad input parameter
      security:
      - JWTbearerAuth: []

securityDefinitions:
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"

  JWTbearerAuth:
    type: "apiKey"
    name: "Authorization"
    in: "header"

definitions:
  Token:
    type: "object"
    properties:
      token:
        type: "string"
        description: "JWT token"
  User:
    type: "object"
    properties:
      username:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      phone:
        type: "string"
    xml:
      name: "User"
  Bookmark:
    type: "object"
    properties:
      url:
        type: "string"
      status:
        type: "string"
      id:
        type: "integer"
    xml:
      name: "User"
  AllBookmarks:
    type: array
    items:
      $ref: '#/definitions/Bookmark'
